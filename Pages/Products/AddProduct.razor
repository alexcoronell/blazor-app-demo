@page "/addproduct"
@inject IProductService productService
@inject ICategoryService categoryService
@inject NavigationManager navigationManager

<PageTitle>Add - Products</PageTitle>

<ModuleTitle Title="Add Product" />

<button class="btn btn-dark mb-3" @onclick="@(() => navigationManager.NavigateTo("/products"))">Products</button>

<EditForm Model="@product" OnSubmit="@Save">
    <div class="row">
        <div class="col-8 form-group">
            <label for="title" class="col-form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="@product.Title" required />
        </div>
    </div>

    <div class="row">
        <div class="col-8 form-group">
            <label for="category" class="col-form-label">Category</label>
            <InputSelect id="category" class="form-control" @bind-Value="@product.CategoryId" required>
                <option>Select Category</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="row">
        <div class="col-8 form-group">
            <label for="price" class="col-form-label">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="@product.Price" required />
        </div>
    </div>

    <div class="row">
        <div class="col-8 form-group">
            <label for="image" class="col-form-label">Image (url)</label>
            <InputText id="image" class="form-control" @bind-Value="@product.Image" required />
        </div>
    </div>

    <div class="row">
        <div class="col-8 form-group">
            <label for="description" class="col-form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="@product.Description" />
        </div>
    </div>

    <hr />
    <button class="btn btn-primary" type="submit">Save</button>

</EditForm>

@code
{
    private Product product = new Product();
    private List<Category>? categories;

    protected override async Task OnInitializedAsync()
    {
        categories = await GetCategories();
    }

    private async Task<List<Category>?> GetCategories()
    {
        return await categoryService.Get();
    }

    private async Task Save()
    {
        product.Images = new string[1] { product.Image };
        await productService.Add(product);
        navigationManager.NavigateTo("/products");
    }
}