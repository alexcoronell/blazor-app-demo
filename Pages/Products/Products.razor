@page "/products"
@inject ILogger<Product> logger;
@inject IProductService productService;
@inject NavigationManager navigationManager
@inject IJSRuntime jSRuntime;

<style>
    .products-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, 280px);
        grid-auto-rows: auto;
        grid-gap: 1rem;
    }
</style>

<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />

<button class="btn btn-dark mb-3" @onclick="@(() => navigationManager.NavigateTo("/addproduct"))">Add Product</button>

@if (products?.Count > 0)
{
    <div class="products-container">
    @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => Delete(product))"><span class="oi oi-trash"></span>Del</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No products</p>
}

@code
{
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        products =  await productService.Get();
    }

    private async Task Delete(Product product)
    {
        var confirmDelete = await jSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove the product {product.Title}");
       if (!confirmDelete)
        {
            return;
        }
        else
        {
            await productService.Delete(product.Id);
            await GetProducts();
        }

    }
}